(function(t,n){typeof exports=="object"&&typeof module<"u"?module.exports=n():typeof define=="function"&&define.amd?define(n):(t=typeof globalThis<"u"?globalThis:t||self,t["@arweave-wallet-kit/browser-wallet-strategy"]=n())})(this,function(){"use strict";var d=Object.defineProperty;var l=(t,n,i)=>n in t?d(t,n,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[n]=i;var s=(t,n,i)=>(l(t,typeof n!="symbol"?n+"":n,i),i);async function t(i,e=[]){return window!=null&&window.arweaveWallet?await window.arweaveWallet[i](...e):new Promise((a,r)=>window.addEventListener("arweaveWalletLoaded",async()=>{try{a(await window.arweaveWallet[i](...e))}catch(w){r(w)}}))}class n{constructor(){s(this,"id","browserwallet");s(this,"name","Browser Wallet");s(this,"description","Any browser wallet with an injected API");s(this,"theme","121,212,131");s(this,"logo","KKiSlNKc5K59MXzUPz5qjtCLsl6_ckjAOg9MyAzaUs0")}async isAvailable(){return typeof window>"u"||!window?(console.error(`[Arweave Wallet Kit] "${this.id}" strategy is unavailable. Window is undefined`),!1):window.arweaveWallet?!0:new Promise(e=>{const a=()=>e(!0);window.addEventListener("arweaveWalletLoaded",a),setTimeout(()=>{window.removeEventListener("arweaveWalletLoaded",a),window.arweaveWallet||console.error(`[Arweave Wallet Kit] "${this.id}" strategy is unavailable. window.arweaveWallet is undefined`),e(!!window.arweaveWallet)},7e3)})}async sync(){}async connect(e,a,r){return await t("connect",[e,a,r])}async disconnect(){return await t("disconnect")}async getActiveAddress(){return await t("getActiveAddress")}async getAllAddresses(){return await t("getAllAddresses")}async getPermissions(){return await t("getPermissions")}async getWalletNames(){return await t("getWalletNames")}async sign(e,a){const r=await t("sign",[e,a]);return e.setSignature({id:r.id,owner:r.owner,reward:r.reward,tags:r.tags,signature:r.signature}),e}async signDataItem(e){return await t("signDataItem",[e])}async encrypt(e,a){return await t("encrypt",[e,a])}async decrypt(e,a){return await t("decrypt",[e,a])}async getArweaveConfig(){return await t("getArweaveConfig")}async signature(e,a){return await t("signature",[e,a])}async getActivePublicKey(){return await t("getActivePublicKey")}async dispatch(e){return await t("dispatch",[e])}async addToken(e){throw new Error("Not implemented: "+e)}addAddressEvent(e){const a=r=>e(r.detail.address);return addEventListener("walletSwitch",a),a}removeAddressEvent(e){removeEventListener("walletSwitch",e)}}return n});
