var w = Object.defineProperty;
var d = (r, e, t) => e in r ? w(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;
var i = (r, e, t) => (d(r, typeof e != "symbol" ? e + "" : e, t), t);
async function a(r, e = []) {
  return window != null && window.arweaveWallet ? await window.arweaveWallet[r](...e) : new Promise(
    (t, n) => window.addEventListener("arweaveWalletLoaded", async () => {
      try {
        t(await window.arweaveWallet[r](...e));
      } catch (s) {
        n(s);
      }
    })
  );
}
class c {
  constructor() {
    i(this, "id", "browserwallet");
    i(this, "name", "Browser Wallet");
    i(this, "description", "Any browser wallet with an injected API");
    i(this, "theme", "121,212,131");
    i(this, "logo", "KKiSlNKc5K59MXzUPz5qjtCLsl6_ckjAOg9MyAzaUs0");
  }
  async isAvailable() {
    return typeof window > "u" || !window ? (console.error(
      `[Arweave Wallet Kit] "${this.id}" strategy is unavailable. Window is undefined`
    ), !1) : window.arweaveWallet ? !0 : new Promise((e) => {
      const t = () => e(!0);
      window.addEventListener("arweaveWalletLoaded", t), setTimeout(() => {
        window.removeEventListener("arweaveWalletLoaded", t), window.arweaveWallet || console.error(
          `[Arweave Wallet Kit] "${this.id}" strategy is unavailable. window.arweaveWallet is undefined`
        ), e(!!window.arweaveWallet);
      }, 7e3);
    });
  }
  async sync() {
  }
  async connect(e, t, n) {
    return await a("connect", [e, t, n]);
  }
  async disconnect() {
    return await a("disconnect");
  }
  async getActiveAddress() {
    return await a("getActiveAddress");
  }
  async getAllAddresses() {
    return await a("getAllAddresses");
  }
  async getPermissions() {
    return await a("getPermissions");
  }
  async getWalletNames() {
    return await a("getWalletNames");
  }
  async sign(e, t) {
    const n = await a("sign", [
      e,
      t
    ]);
    return e.setSignature({
      id: n.id,
      owner: n.owner,
      reward: n.reward,
      tags: n.tags,
      signature: n.signature
    }), e;
  }
  async signDataItem(e) {
    return await a("signDataItem", [e]);
  }
  async encrypt(e, t) {
    return await a("encrypt", [e, t]);
  }
  async decrypt(e, t) {
    return await a("decrypt", [e, t]);
  }
  async getArweaveConfig() {
    return await a("getArweaveConfig");
  }
  async signature(e, t) {
    return await a("signature", [e, t]);
  }
  async getActivePublicKey() {
    return await a("getActivePublicKey");
  }
  async dispatch(e) {
    return await a("dispatch", [e]);
  }
  async addToken(e) {
    throw new Error("Not implemented: " + e);
  }
  addAddressEvent(e) {
    const t = (n) => e(n.detail.address);
    return addEventListener("walletSwitch", t), t;
  }
  removeAddressEvent(e) {
    removeEventListener("walletSwitch", e);
  }
}
export {
  c as default
};
