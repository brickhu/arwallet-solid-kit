import { SignatureOptions } from 'arweave/node/lib/crypto/crypto-interface';
import { AppInfo, DispatchResult, GatewayConfig, PermissionType, DataItem } from 'arconnect';
import { Strategy } from '@arweave-wallet-kit/core/strategy';
import { default as Transaction } from 'arweave/web/lib/transaction';
import { OthentOptions } from '@othent/kms';

export default class OthentStrategy implements Strategy {
    id: "othent";
    name: string;
    description: string;
    theme: string;
    logo: string;
    url: string;
    private othent;
    private othentOptions;
    private addressListeners;
    constructor();
    __overrideOthentOptions(othentOptions: OthentOptions): void;
    private othentInstance;
    /**
     * Advanced function to override the default API ID
     * Othent uses.
     */
    isAvailable(): Promise<boolean>;
    connect(permissions: PermissionType[], appInfo?: AppInfo, gateway?: GatewayConfig): Promise<undefined>;
    disconnect(): Promise<void>;
    decrypt(data: BufferSource, options: RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<Uint8Array>;
    dispatch(transaction: Transaction): Promise<DispatchResult>;
    signDataItem(p: DataItem): Promise<ArrayBuffer>;
    encrypt(data: BufferSource, options: RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<Uint8Array>;
    getPermissions(): Promise<import('@othent/kms').PermissionType[]>;
    getActiveAddress(): Promise<"" | import('@othent/kms').B64UrlString>;
    getAllAddresses(): Promise<import('@othent/kms').B64UrlString[]>;
    addToken(id: string): Promise<void>;
    getArweaveConfig(): Promise<GatewayConfig>;
    getActivePublicKey(): Promise<"" | import('@othent/kms').B64UrlString>;
    getWalletNames(): Promise<Record<import('@othent/kms').B64UrlString, string>>;
    sign(transaction: Transaction, options?: SignatureOptions): Promise<Transaction>;
    userDetails(): Promise<import('@othent/kms').UserDetails | null>;
    addAddressEvent(listener: ListenerFunction): any;
    removeAddressEvent(listener: (e: CustomEvent<{
        address: string;
    }>) => void): void;
    signature(data: Uint8Array, options: AlgorithmIdentifier | RsaPssParams | EcdsaParams): Promise<Uint8Array>;
}
type ListenerFunction = (address: string) => void;
export {};
