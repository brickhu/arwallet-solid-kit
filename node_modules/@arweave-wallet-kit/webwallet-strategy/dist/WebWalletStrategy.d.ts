import { AppInfo, GatewayConfig, PermissionType } from "@arweave-wallet-kit/core/wallet";
import BrowserWalletStrategy from "@arweave-wallet-kit/browser-wallet-strategy";
import { Strategy } from "@arweave-wallet-kit/core/strategy";
import { WebWalletConfig } from "./types";
export default class WebWalletStrategy extends BrowserWalletStrategy implements Strategy {
    id: string;
    name: string;
    description: string;
    theme: string;
    logo: string;
    url: string;
    instance: {
        namespaces: {
            arweaveWallet: {
                walletName: string;
                connect: () => any;
                disconnect: () => any;
                getActiveAddress: () => string | undefined;
                getActivePublicKey: () => Promise<string>;
                getAllAddresses: () => never;
                getWalletNames: () => never;
                signature: () => never;
                sign: (tx: import("arweave/web/lib/transaction").default, options?: any) => Promise<import("arweave/web/lib/transaction").default>;
                dispatch: (tx: import("arweave/web/lib/transaction").default, options?: any) => Promise<import("arweave-wallet-connector/lib/Arweave").DispatchResult>;
                encrypt: (data: Uint8Array, options: any) => Promise<Uint8Array>;
                decrypt: (data: Uint8Array, options: any) => Promise<Uint8Array>;
                getPermissions: () => string[];
                getArweaveConfig: () => Promise<Omit<import("arweave/web/lib/api").ApiConfig, "logger"> & {
                    logger?: any;
                }>;
            };
        };
        postMessage(method: string, params?: any[] | undefined, options?: import("arweave-wallet-connector/lib/types").PostMessageOptions | undefined): any;
        getPublicKey(): Promise<string>;
        getArweaveConfig(): Promise<Omit<import("arweave/web/lib/api").ApiConfig, "logger"> & {
            logger?: any;
        }>;
        signTransaction(tx: import("arweave/web/lib/transaction").default, options?: object | import("arweave-wallet-connector/lib/types").Null): Promise<import("arweave/web/lib/transaction").default>;
        signDataItem(tx: {
            tags?: {
                name: string;
                value: string;
            }[] | undefined;
            target?: string | undefined;
            data?: string | undefined;
            anchor?: string | undefined;
        }): Promise<ArrayBufferLike>;
        dispatch(tx: import("arweave/web/lib/transaction").default, options?: object | import("arweave-wallet-connector/lib/types").Null): Promise<import("arweave-wallet-connector/lib/Arweave").DispatchResult>;
        signMessage<T extends ArrayBufferView>(message: T, options: {
            hashAlgorithm?: "SHA-256" | "SHA-384" | "SHA-512" | undefined;
        }): Promise<T>;
        verifyMessage(message: ArrayBufferView, signature: string | ArrayBufferView, publicKey: string, options: {
            hashAlgorithm?: "SHA-256" | "SHA-384" | "SHA-512" | undefined;
        } & {
            signAlgorithm?: "RSA" | undefined;
        }): Promise<boolean>;
        encrypt<T_1 extends ArrayBufferView>(message: T_1, publicKey: string, options: AlgorithmIdentifier): Promise<T_1>;
        decrypt<T_2 extends ArrayBufferView>(message: T_2, options: AlgorithmIdentifier): Promise<T_2>;
        privateHash<T_3 extends ArrayBufferView>(message: T_3, options: {
            hashAlgorithm?: "SHA-256" | "SHA-384" | "SHA-512" | undefined;
        }): Promise<T_3>;
        address?: string | undefined;
        connect(): any;
        disconnect(): any;
    } & import("arweave-wallet-connector/lib/browser/Reactive").ReactiveConnector;
    instanceURL: string;
    constructor(config?: WebWalletConfig);
    isAvailable(): Promise<boolean>;
    resumeSession(): Promise<void>;
    connect(permissions: PermissionType[], appInfo?: AppInfo, gateway?: GatewayConfig): Promise<void>;
    addAddressEvent(listener: (address: string) => void): any;
    removeAddressEvent(listener: any): void;
}
