var c = Object.defineProperty;
var l = (a, n, e) => n in a ? c(a, n, { enumerable: !0, configurable: !0, writable: !0, value: e }) : a[n] = e;
var t = (a, n, e) => (l(a, typeof n != "symbol" ? n + "" : n, e), e);
import h from "@arweave-wallet-kit/browser-wallet-strategy";
import { ArweaveWebWallet as i } from "arweave-wallet-connector";
const s = {
  name: "Arweave.app",
  description: "Web based wallet software",
  theme: "24, 24, 24",
  logo: "qVms-k8Ox-eKFJN5QFvrPQvT9ryqQXaFcYbr-fJbgLY",
  url: "arweave.app",
  customInterfaceURL: "https://arweave.app"
};
class d extends h {
  constructor(e) {
    super();
    t(this, "id", "webwallet");
    t(this, "name", s.name);
    t(this, "description", s.description);
    t(this, "theme", s.theme);
    t(this, "logo", s.logo);
    t(this, "url", s.customInterfaceURL);
    t(this, "instance", new i());
    t(this, "instanceURL", s.url);
    e && (this.name = e.name, this.description = e.description, this.theme = e.theme || s.theme, this.logo = e.logo || s.logo, this.instanceURL = e.url, this.url = e.customInterfaceURL || "http://" + e.url), this.instance.setUrl(this.instanceURL), this.instanceURL !== s.url && (this.id = this.id + this.instanceURL);
  }
  async isAvailable() {
    return !0;
  }
  async resumeSession() {
    this.instance.setUrl(this.instanceURL), await this.instance.connect();
  }
  async connect(e, r, o) {
    o && console.warn(
      "[Arweave Wallet Kit] The WebWallets API does not support custom gateway connection yet."
    ), this.instance = new i(r), await this.resumeSession();
  }
  addAddressEvent(e) {
    return this.instance.on("connect", e), e;
  }
  removeAddressEvent(e) {
    this.instance.off("connect", e);
  }
}
export {
  d as default
};
