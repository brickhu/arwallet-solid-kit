import {
  c
} from "./chunk-NG3JMJTJ.js";
import {
  __commonJS
} from "./chunk-KPM4MXSK.js";

// browser-external:util
var require_util = __commonJS({
  "browser-external:util"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "util" has been externalized for browser compatibility. Cannot access "util.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/arweave-wallet-connector/lib/index.js
function __rest(s2, e) {
  var t2 = {};
  for (var p in s2) if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
    t2[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t2[p[i]] = s2[p[i]];
    }
  return t2;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
var B64js = () => {
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
    var len2 = b64.length;
    if (len2 % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1)
      validLen = len2;
    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i2;
    for (i2 = 0; i2 < len2; i2 += 4) {
      tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i2 = start; i2 < end; i2 += 3) {
      tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
      output.push(tripletToBase64(tmp));
    }
    return output.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len2 = uint8.length;
    var extraBytes = len2 % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
      parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len2 - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
    } else if (extraBytes === 2) {
      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
    }
    return parts.join("");
  }
  return { toByteArray, fromByteArray };
};
function b64UrlToString(b64UrlString) {
  let buffer = b64UrlToBuffer(b64UrlString);
  return new TextDecoder("utf-8", { fatal: true }).decode(buffer);
}
function bufferToString(buffer) {
  return new TextDecoder("utf-8", { fatal: true }).decode(buffer);
}
function stringToBuffer(string) {
  return new TextEncoder().encode(string);
}
function stringToB64Url(string) {
  return bufferTob64Url(stringToBuffer(string));
}
function b64UrlToBuffer(b64UrlString) {
  return new Uint8Array(B64js().toByteArray(b64UrlDecode(b64UrlString)));
}
function bufferTob64(buffer) {
  return B64js().fromByteArray(new Uint8Array(buffer));
}
function bufferTob64Url(buffer) {
  return b64UrlEncode(bufferTob64(buffer));
}
function b64UrlEncode(b64UrlString) {
  return b64UrlString.replace(/\+/g, "-").replace(/\//g, "_").replace(/\=/g, "");
}
function b64UrlDecode(b64UrlString) {
  b64UrlString = b64UrlString.replace(/\-/g, "+").replace(/\_/g, "/");
  let padding;
  b64UrlString.length % 4 == 0 ? padding = 0 : padding = 4 - b64UrlString.length % 4;
  return b64UrlString.concat("=".repeat(padding));
}
var ArweaveUtils = {
  b64UrlToString,
  bufferToString,
  stringToBuffer,
  stringToB64Url,
  b64UrlToBuffer,
  bufferTob64,
  bufferTob64Url,
  b64UrlEncode,
  b64UrlDecode
};
var BaseObject = class {
  get(field, options) {
    if (!Object.getOwnPropertyNames(this).includes(field)) {
      throw new Error(`Field "${field}" is not a property of the Arweave Transaction class.`);
    }
    if (this[field] instanceof Uint8Array) {
      if (options && options.decode && options.string) {
        return ArweaveUtils.bufferToString(this[field]);
      }
      if (options && options.decode && !options.string) {
        return this[field];
      }
      return ArweaveUtils.bufferTob64Url(this[field]);
    }
    if (options && options.decode == true) {
      if (options && options.string) {
        return ArweaveUtils.b64UrlToString(this[field]);
      }
      return ArweaveUtils.b64UrlToBuffer(this[field]);
    }
    return this[field];
  }
};
var Tag = class extends BaseObject {
  constructor(name, value, decode = false) {
    super();
    this.name = name;
    this.value = value;
  }
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var _Reflect = {};
var hasRequired_Reflect;
function require_Reflect() {
  if (hasRequired_Reflect) return _Reflect;
  hasRequired_Reflect = 1;
  var Reflect2;
  (function(Reflect3) {
    (function(factory) {
      var root = typeof commonjsGlobal === "object" ? commonjsGlobal : typeof self === "object" ? self : typeof this === "object" ? this : Function("return this;")();
      var exporter = makeExporter(Reflect3);
      if (typeof root.Reflect === "undefined") {
        root.Reflect = Reflect3;
      } else {
        exporter = makeExporter(root.Reflect, exporter);
      }
      factory(exporter);
      function makeExporter(target, previous) {
        return function(key, value) {
          if (typeof target[key] !== "function") {
            Object.defineProperty(target, key, { configurable: true, writable: true, value });
          }
          if (previous)
            previous(key, value);
        };
      }
    })(function(exporter) {
      var hasOwn = Object.prototype.hasOwnProperty;
      var supportsSymbol = typeof Symbol === "function";
      var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
      var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
      var supportsCreate = typeof Object.create === "function";
      var supportsProto = { __proto__: [] } instanceof Array;
      var downLevel = !supportsCreate && !supportsProto;
      var HashMap = {
        // create an object in dictionary mode (a.k.a. "slow" mode in v8)
        create: supportsCreate ? function() {
          return MakeDictionary(/* @__PURE__ */ Object.create(null));
        } : supportsProto ? function() {
          return MakeDictionary({ __proto__: null });
        } : function() {
          return MakeDictionary({});
        },
        has: downLevel ? function(map, key) {
          return hasOwn.call(map, key);
        } : function(map, key) {
          return key in map;
        },
        get: downLevel ? function(map, key) {
          return hasOwn.call(map, key) ? map[key] : void 0;
        } : function(map, key) {
          return map[key];
        }
      };
      var functionPrototype = Object.getPrototypeOf(Function);
      var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
      var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
      var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
      var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
      var Metadata = new _WeakMap();
      function decorate(decorators, target, propertyKey, attributes) {
        if (!IsUndefined(propertyKey)) {
          if (!IsArray(decorators))
            throw new TypeError();
          if (!IsObject(target))
            throw new TypeError();
          if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
            throw new TypeError();
          if (IsNull(attributes))
            attributes = void 0;
          propertyKey = ToPropertyKey(propertyKey);
          return DecorateProperty(decorators, target, propertyKey, attributes);
        } else {
          if (!IsArray(decorators))
            throw new TypeError();
          if (!IsConstructor(target))
            throw new TypeError();
          return DecorateConstructor(decorators, target);
        }
      }
      exporter("decorate", decorate);
      function metadata(metadataKey, metadataValue) {
        function decorator(target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
            throw new TypeError();
          OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        return decorator;
      }
      exporter("metadata", metadata);
      function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
      }
      exporter("defineMetadata", defineMetadata);
      function hasMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasMetadata(metadataKey, target, propertyKey);
      }
      exporter("hasMetadata", hasMetadata);
      function hasOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
      }
      exporter("hasOwnMetadata", hasOwnMetadata);
      function getMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetMetadata(metadataKey, target, propertyKey);
      }
      exporter("getMetadata", getMetadata);
      function getOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
      }
      exporter("getOwnMetadata", getOwnMetadata);
      function getMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryMetadataKeys(target, propertyKey);
      }
      exporter("getMetadataKeys", getMetadataKeys);
      function getOwnMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryOwnMetadataKeys(target, propertyKey);
      }
      exporter("getOwnMetadataKeys", getOwnMetadataKeys);
      function deleteMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        var metadataMap = GetOrCreateMetadataMap(
          target,
          propertyKey,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return false;
        if (!metadataMap.delete(metadataKey))
          return false;
        if (metadataMap.size > 0)
          return true;
        var targetMetadata = Metadata.get(target);
        targetMetadata.delete(propertyKey);
        if (targetMetadata.size > 0)
          return true;
        Metadata.delete(target);
        return true;
      }
      exporter("deleteMetadata", deleteMetadata);
      function DecorateConstructor(decorators, target) {
        for (var i = decorators.length - 1; i >= 0; --i) {
          var decorator = decorators[i];
          var decorated = decorator(target);
          if (!IsUndefined(decorated) && !IsNull(decorated)) {
            if (!IsConstructor(decorated))
              throw new TypeError();
            target = decorated;
          }
        }
        return target;
      }
      function DecorateProperty(decorators, target, propertyKey, descriptor) {
        for (var i = decorators.length - 1; i >= 0; --i) {
          var decorator = decorators[i];
          var decorated = decorator(target, propertyKey, descriptor);
          if (!IsUndefined(decorated) && !IsNull(decorated)) {
            if (!IsObject(decorated))
              throw new TypeError();
            descriptor = decorated;
          }
        }
        return descriptor;
      }
      function GetOrCreateMetadataMap(O, P, Create) {
        var targetMetadata = Metadata.get(O);
        if (IsUndefined(targetMetadata)) {
          if (!Create)
            return void 0;
          targetMetadata = new _Map();
          Metadata.set(O, targetMetadata);
        }
        var metadataMap = targetMetadata.get(P);
        if (IsUndefined(metadataMap)) {
          if (!Create)
            return void 0;
          metadataMap = new _Map();
          targetMetadata.set(P, metadataMap);
        }
        return metadataMap;
      }
      function OrdinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn2)
          return true;
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
          return OrdinaryHasMetadata(MetadataKey, parent, P);
        return false;
      }
      function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return false;
        return ToBoolean(metadataMap.has(MetadataKey));
      }
      function OrdinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn2)
          return OrdinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
          return OrdinaryGetMetadata(MetadataKey, parent, P);
        return void 0;
      }
      function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return void 0;
        return metadataMap.get(MetadataKey);
      }
      function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          true
        );
        metadataMap.set(MetadataKey, MetadataValue);
      }
      function OrdinaryMetadataKeys(O, P) {
        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (parent === null)
          return ownKeys;
        var parentKeys = OrdinaryMetadataKeys(parent, P);
        if (parentKeys.length <= 0)
          return ownKeys;
        if (ownKeys.length <= 0)
          return parentKeys;
        var set = new _Set();
        var keys = [];
        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
          var key = ownKeys_1[_i];
          var hasKey = set.has(key);
          if (!hasKey) {
            set.add(key);
            keys.push(key);
          }
        }
        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
          var key = parentKeys_1[_a];
          var hasKey = set.has(key);
          if (!hasKey) {
            set.add(key);
            keys.push(key);
          }
        }
        return keys;
      }
      function OrdinaryOwnMetadataKeys(O, P) {
        var keys = [];
        var metadataMap = GetOrCreateMetadataMap(
          O,
          P,
          /*Create*/
          false
        );
        if (IsUndefined(metadataMap))
          return keys;
        var keysObj = metadataMap.keys();
        var iterator = GetIterator(keysObj);
        var k = 0;
        while (true) {
          var next = IteratorStep(iterator);
          if (!next) {
            keys.length = k;
            return keys;
          }
          var nextValue = IteratorValue(next);
          try {
            keys[k] = nextValue;
          } catch (e) {
            try {
              IteratorClose(iterator);
            } finally {
              throw e;
            }
          }
          k++;
        }
      }
      function Type(x) {
        if (x === null)
          return 1;
        switch (typeof x) {
          case "undefined":
            return 0;
          case "boolean":
            return 2;
          case "string":
            return 3;
          case "symbol":
            return 4;
          case "number":
            return 5;
          case "object":
            return x === null ? 1 : 6;
          default:
            return 6;
        }
      }
      function IsUndefined(x) {
        return x === void 0;
      }
      function IsNull(x) {
        return x === null;
      }
      function IsSymbol(x) {
        return typeof x === "symbol";
      }
      function IsObject(x) {
        return typeof x === "object" ? x !== null : typeof x === "function";
      }
      function ToPrimitive(input, PreferredType) {
        switch (Type(input)) {
          case 0:
            return input;
          case 1:
            return input;
          case 2:
            return input;
          case 3:
            return input;
          case 4:
            return input;
          case 5:
            return input;
        }
        var hint = PreferredType === 3 ? "string" : PreferredType === 5 ? "number" : "default";
        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
        if (exoticToPrim !== void 0) {
          var result = exoticToPrim.call(input, hint);
          if (IsObject(result))
            throw new TypeError();
          return result;
        }
        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
      }
      function OrdinaryToPrimitive(O, hint) {
        if (hint === "string") {
          var toString_1 = O.toString;
          if (IsCallable(toString_1)) {
            var result = toString_1.call(O);
            if (!IsObject(result))
              return result;
          }
          var valueOf = O.valueOf;
          if (IsCallable(valueOf)) {
            var result = valueOf.call(O);
            if (!IsObject(result))
              return result;
          }
        } else {
          var valueOf = O.valueOf;
          if (IsCallable(valueOf)) {
            var result = valueOf.call(O);
            if (!IsObject(result))
              return result;
          }
          var toString_2 = O.toString;
          if (IsCallable(toString_2)) {
            var result = toString_2.call(O);
            if (!IsObject(result))
              return result;
          }
        }
        throw new TypeError();
      }
      function ToBoolean(argument) {
        return !!argument;
      }
      function ToString(argument) {
        return "" + argument;
      }
      function ToPropertyKey(argument) {
        var key = ToPrimitive(
          argument,
          3
          /* String */
        );
        if (IsSymbol(key))
          return key;
        return ToString(key);
      }
      function IsArray(argument) {
        return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
      }
      function IsCallable(argument) {
        return typeof argument === "function";
      }
      function IsConstructor(argument) {
        return typeof argument === "function";
      }
      function IsPropertyKey(argument) {
        switch (Type(argument)) {
          case 3:
            return true;
          case 4:
            return true;
          default:
            return false;
        }
      }
      function GetMethod(V, P) {
        var func = V[P];
        if (func === void 0 || func === null)
          return void 0;
        if (!IsCallable(func))
          throw new TypeError();
        return func;
      }
      function GetIterator(obj) {
        var method = GetMethod(obj, iteratorSymbol);
        if (!IsCallable(method))
          throw new TypeError();
        var iterator = method.call(obj);
        if (!IsObject(iterator))
          throw new TypeError();
        return iterator;
      }
      function IteratorValue(iterResult) {
        return iterResult.value;
      }
      function IteratorStep(iterator) {
        var result = iterator.next();
        return result.done ? false : result;
      }
      function IteratorClose(iterator) {
        var f = iterator["return"];
        if (f)
          f.call(iterator);
      }
      function OrdinaryGetPrototypeOf(O) {
        var proto = Object.getPrototypeOf(O);
        if (typeof O !== "function" || O === functionPrototype)
          return proto;
        if (proto !== functionPrototype)
          return proto;
        var prototype = O.prototype;
        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
        if (prototypeProto == null || prototypeProto === Object.prototype)
          return proto;
        var constructor = prototypeProto.constructor;
        if (typeof constructor !== "function")
          return proto;
        if (constructor === O)
          return proto;
        return constructor;
      }
      function CreateMapPolyfill() {
        var cacheSentinel = {};
        var arraySentinel = [];
        var MapIterator = (
          /** @class */
          function() {
            function MapIterator2(keys, values, selector) {
              this._index = 0;
              this._keys = keys;
              this._values = values;
              this._selector = selector;
            }
            MapIterator2.prototype["@@iterator"] = function() {
              return this;
            };
            MapIterator2.prototype[iteratorSymbol] = function() {
              return this;
            };
            MapIterator2.prototype.next = function() {
              var index = this._index;
              if (index >= 0 && index < this._keys.length) {
                var result = this._selector(this._keys[index], this._values[index]);
                if (index + 1 >= this._keys.length) {
                  this._index = -1;
                  this._keys = arraySentinel;
                  this._values = arraySentinel;
                } else {
                  this._index++;
                }
                return { value: result, done: false };
              }
              return { value: void 0, done: true };
            };
            MapIterator2.prototype.throw = function(error) {
              if (this._index >= 0) {
                this._index = -1;
                this._keys = arraySentinel;
                this._values = arraySentinel;
              }
              throw error;
            };
            MapIterator2.prototype.return = function(value) {
              if (this._index >= 0) {
                this._index = -1;
                this._keys = arraySentinel;
                this._values = arraySentinel;
              }
              return { value, done: true };
            };
            return MapIterator2;
          }()
        );
        return (
          /** @class */
          function() {
            function Map2() {
              this._keys = [];
              this._values = [];
              this._cacheKey = cacheSentinel;
              this._cacheIndex = -2;
            }
            Object.defineProperty(Map2.prototype, "size", {
              get: function() {
                return this._keys.length;
              },
              enumerable: true,
              configurable: true
            });
            Map2.prototype.has = function(key) {
              return this._find(
                key,
                /*insert*/
                false
              ) >= 0;
            };
            Map2.prototype.get = function(key) {
              var index = this._find(
                key,
                /*insert*/
                false
              );
              return index >= 0 ? this._values[index] : void 0;
            };
            Map2.prototype.set = function(key, value) {
              var index = this._find(
                key,
                /*insert*/
                true
              );
              this._values[index] = value;
              return this;
            };
            Map2.prototype.delete = function(key) {
              var index = this._find(
                key,
                /*insert*/
                false
              );
              if (index >= 0) {
                var size = this._keys.length;
                for (var i = index + 1; i < size; i++) {
                  this._keys[i - 1] = this._keys[i];
                  this._values[i - 1] = this._values[i];
                }
                this._keys.length--;
                this._values.length--;
                if (key === this._cacheKey) {
                  this._cacheKey = cacheSentinel;
                  this._cacheIndex = -2;
                }
                return true;
              }
              return false;
            };
            Map2.prototype.clear = function() {
              this._keys.length = 0;
              this._values.length = 0;
              this._cacheKey = cacheSentinel;
              this._cacheIndex = -2;
            };
            Map2.prototype.keys = function() {
              return new MapIterator(this._keys, this._values, getKey);
            };
            Map2.prototype.values = function() {
              return new MapIterator(this._keys, this._values, getValue);
            };
            Map2.prototype.entries = function() {
              return new MapIterator(this._keys, this._values, getEntry);
            };
            Map2.prototype["@@iterator"] = function() {
              return this.entries();
            };
            Map2.prototype[iteratorSymbol] = function() {
              return this.entries();
            };
            Map2.prototype._find = function(key, insert) {
              if (this._cacheKey !== key) {
                this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
              }
              if (this._cacheIndex < 0 && insert) {
                this._cacheIndex = this._keys.length;
                this._keys.push(key);
                this._values.push(void 0);
              }
              return this._cacheIndex;
            };
            return Map2;
          }()
        );
        function getKey(key, _) {
          return key;
        }
        function getValue(_, value) {
          return value;
        }
        function getEntry(key, value) {
          return [key, value];
        }
      }
      function CreateSetPolyfill() {
        return (
          /** @class */
          function() {
            function Set2() {
              this._map = new _Map();
            }
            Object.defineProperty(Set2.prototype, "size", {
              get: function() {
                return this._map.size;
              },
              enumerable: true,
              configurable: true
            });
            Set2.prototype.has = function(value) {
              return this._map.has(value);
            };
            Set2.prototype.add = function(value) {
              return this._map.set(value, value), this;
            };
            Set2.prototype.delete = function(value) {
              return this._map.delete(value);
            };
            Set2.prototype.clear = function() {
              this._map.clear();
            };
            Set2.prototype.keys = function() {
              return this._map.keys();
            };
            Set2.prototype.values = function() {
              return this._map.values();
            };
            Set2.prototype.entries = function() {
              return this._map.entries();
            };
            Set2.prototype["@@iterator"] = function() {
              return this.keys();
            };
            Set2.prototype[iteratorSymbol] = function() {
              return this.keys();
            };
            return Set2;
          }()
        );
      }
      function CreateWeakMapPolyfill() {
        var UUID_SIZE = 16;
        var keys = HashMap.create();
        var rootKey = CreateUniqueKey();
        return (
          /** @class */
          function() {
            function WeakMap2() {
              this._key = CreateUniqueKey();
            }
            WeakMap2.prototype.has = function(target) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                false
              );
              return table !== void 0 ? HashMap.has(table, this._key) : false;
            };
            WeakMap2.prototype.get = function(target) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                false
              );
              return table !== void 0 ? HashMap.get(table, this._key) : void 0;
            };
            WeakMap2.prototype.set = function(target, value) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                true
              );
              table[this._key] = value;
              return this;
            };
            WeakMap2.prototype.delete = function(target) {
              var table = GetOrCreateWeakMapTable(
                target,
                /*create*/
                false
              );
              return table !== void 0 ? delete table[this._key] : false;
            };
            WeakMap2.prototype.clear = function() {
              this._key = CreateUniqueKey();
            };
            return WeakMap2;
          }()
        );
        function CreateUniqueKey() {
          var key;
          do
            key = "@@WeakMap@@" + CreateUUID();
          while (HashMap.has(keys, key));
          keys[key] = true;
          return key;
        }
        function GetOrCreateWeakMapTable(target, create) {
          if (!hasOwn.call(target, rootKey)) {
            if (!create)
              return void 0;
            Object.defineProperty(target, rootKey, { value: HashMap.create() });
          }
          return target[rootKey];
        }
        function FillRandomBytes(buffer, size) {
          for (var i = 0; i < size; ++i)
            buffer[i] = Math.random() * 255 | 0;
          return buffer;
        }
        function GenRandomBytes(size) {
          if (typeof Uint8Array === "function") {
            if (typeof crypto !== "undefined")
              return crypto.getRandomValues(new Uint8Array(size));
            if (typeof msCrypto !== "undefined")
              return msCrypto.getRandomValues(new Uint8Array(size));
            return FillRandomBytes(new Uint8Array(size), size);
          }
          return FillRandomBytes(new Array(size), size);
        }
        function CreateUUID() {
          var data = GenRandomBytes(UUID_SIZE);
          data[6] = data[6] & 79 | 64;
          data[8] = data[8] & 191 | 128;
          var result = "";
          for (var offset = 0; offset < UUID_SIZE; ++offset) {
            var byte = data[offset];
            if (offset === 4 || offset === 6 || offset === 8)
              result += "-";
            if (byte < 16)
              result += "0";
            result += byte.toString(16).toLowerCase();
          }
          return result;
        }
      }
      function MakeDictionary(obj) {
        obj.__ = void 0;
        delete obj.__;
        return obj;
      }
    });
  })(Reflect2 || (Reflect2 = {}));
  return _Reflect;
}
var defaultGetErrorObject = void 0;
function checkGetErrorObject(getErrorObject) {
  if (typeof getErrorObject !== "function") {
    throw new Error("This module should not be used in runtime. Instead, use a transformer during compilation.");
  }
}
var assertionsMetadataKey = Symbol("assertions");
function inputObjectAtPath(path, inputObject) {
  let subField = inputObject;
  for (const key of path.slice(1)) {
    subField = subField[key.startsWith("[") ? parseInt(key.replace("[", "").replace("]", "")) : key];
  }
  return subField;
}
function appendInputToErrorMessage(message, path, inputObject) {
  if (message === void 0)
    return "validation error";
  const foundInputObject = inputObjectAtPath(path, inputObject);
  try {
    return message + ", found: " + require_util().inspect(foundInputObject);
  } catch (error) {
  }
  try {
    return message + ", found: " + JSON.stringify(foundInputObject);
  } catch (error) {
  }
  return message;
}
var TypeGuardError = class extends Error {
  constructor(errorObject, inputObject) {
    super(appendInputToErrorMessage(errorObject.message, errorObject.path, inputObject));
    this.name = "TypeGuardError";
    this.path = errorObject.path;
    this.reason = errorObject.reason;
    this.input = inputObject;
  }
};
function AssertType(assertion, options = {}) {
  require_Reflect();
  return function(target, propertyKey, parameterIndex) {
    const assertions = Reflect.getOwnMetadata(assertionsMetadataKey, target, propertyKey) || [];
    if (Reflect.getOwnMetadata("design:returntype", target, propertyKey) === Promise) {
      assertions[parameterIndex] = { assertion, options: Object.assign({ async: true }, options) };
    } else {
      assertions[parameterIndex] = { assertion, options };
    }
    Reflect.defineMetadata(assertionsMetadataKey, assertions, target, propertyKey);
  };
}
function ValidateClass(errorConstructor = TypeGuardError) {
  require_Reflect();
  return function(target) {
    for (const propertyKey of Object.getOwnPropertyNames(target.prototype)) {
      const assertions = Reflect.getOwnMetadata(assertionsMetadataKey, target.prototype, propertyKey);
      if (assertions) {
        const originalMethod = target.prototype[propertyKey];
        target.prototype[propertyKey] = function(...args) {
          for (let i = 0; i < assertions.length; i++) {
            if (!assertions[i]) {
              continue;
            }
            const errorObject = assertions[i].assertion(args[i]);
            if (errorObject !== null) {
              const errorInstance = new errorConstructor(errorObject, args[i]);
              if (assertions[i].options.async) {
                return Promise.reject(errorInstance);
              } else {
                throw errorInstance;
              }
            }
          }
          return originalMethod.apply(this, args);
        };
      }
    }
  };
}
function is(obj, getErrorObject = defaultGetErrorObject) {
  checkGetErrorObject(getErrorObject);
  const errorObject = getErrorObject(obj);
  return errorObject === null;
}
function assertType(obj, getErrorObject = defaultGetErrorObject) {
  checkGetErrorObject(getErrorObject);
  const errorObject = getErrorObject(obj);
  if (errorObject === null) {
    return obj;
  } else {
    throw new TypeGuardError(errorObject, obj);
  }
}
function createIs(getErrorObject = defaultGetErrorObject) {
  checkGetErrorObject(getErrorObject);
  return (obj) => is(obj, getErrorObject);
}
function createAssertType(getErrorObject = defaultGetErrorObject) {
  checkGetErrorObject(getErrorObject);
  return (obj) => assertType(obj, getErrorObject);
}
function setDefaultGetErrorObject(getErrorObject) {
  defaultGetErrorObject = getErrorObject;
}
var typescriptIs = {
  is,
  assertType,
  createIs,
  createAssertType,
  equals: is,
  createEquals: createIs,
  assertEquals: assertType,
  createAssertEquals: createAssertType,
  AssertType,
  ValidateClass,
  TypeGuardError,
  setDefaultGetErrorObject
};
function ArweaveApi(Base) {
  return class Arweave extends Base {
    constructor(...args) {
      super(...args);
      this.namespaces = {
        arweaveWallet: {
          walletName: "ArConnect",
          connect: () => this.address || this.connect(),
          disconnect: () => this.disconnect(),
          getActiveAddress: () => this.address,
          getActivePublicKey: () => this.getPublicKey(),
          getAllAddresses: () => {
            throw "not implemented";
          },
          getWalletNames: () => {
            throw "not implemented";
          },
          signature: () => {
            throw "deprecated, do not use";
          },
          sign: (tx, options) => this.signTransaction(tx, options),
          dispatch: (tx, options) => this.dispatch(tx, options),
          encrypt: (data, options) => __awaiter(this, void 0, void 0, function* () {
            const key = yield this.getPublicKey();
            return this.encrypt(data, key, options);
          }),
          decrypt: (data, options) => this.decrypt(data, options),
          getPermissions: () => ["ACCESS_ADDRESS", "ACCESS_PUBLIC_KEY", "ACCESS_ALL_ADDRESSES", "SIGN_TRANSACTION", "ENCRYPT", "DECRYPT", "SIGNATURE", "ACCESS_ARWEAVE_CONFIG", "DISPATCH"],
          getArweaveConfig: () => this.getArweaveConfig()
        }
      };
    }
    postMessage(method, params, options) {
      return super.postMessage(method, params, Object.assign(Object.assign({}, options), { protocol: "arweave", version: "1.0.0" }));
    }
    getPublicKey() {
      return __awaiter(this, void 0, void 0, function* () {
        const res = yield this.postMessage("getPublicKey");
        if (!typescriptIs.is(res, (object) => {
          function _string(object2) {
            if (typeof object2 !== "string")
              return {};
            else
              return null;
          }
          return _string(object);
        })) {
          throw "TypeError";
        }
        return res;
      });
    }
    getArweaveConfig() {
      return __awaiter(this, void 0, void 0, function* () {
        const res = yield this.postMessage("getArweaveConfig");
        if (!typescriptIs.is(res, (object) => {
          function _undefined(object2) {
            if (object2 !== void 0)
              return {};
            else
              return null;
          }
          function _string(object2) {
            if (typeof object2 !== "string")
              return {};
            else
              return null;
          }
          function su__undefined__string_eu(object2) {
            var conditions = [_undefined, _string];
            for (const condition of conditions) {
              var error = condition(object2);
              if (!error)
                return null;
            }
            return {};
          }
          function _number(object2) {
            if (typeof object2 !== "number")
              return {};
            else
              return null;
          }
          function su__undefined__string__number_eu(object2) {
            var conditions = [_undefined, _string, _number];
            for (const condition of conditions) {
              var error = condition(object2);
              if (!error)
                return null;
            }
            return {};
          }
          function su__undefined__number_eu(object2) {
            var conditions = [_undefined, _number];
            for (const condition of conditions) {
              var error = condition(object2);
              if (!error)
                return null;
            }
            return {};
          }
          function _false(object2) {
            if (object2 !== false)
              return {};
            else
              return null;
          }
          function _true(object2) {
            if (object2 !== true)
              return {};
            else
              return null;
          }
          function su__undefined__10__11_eu(object2) {
            var conditions = [_undefined, _false, _true];
            for (const condition of conditions) {
              var error = condition(object2);
              if (!error)
                return null;
            }
            return {};
          }
          function _1(object2) {
            if (typeof object2 !== "object" || object2 === null || Array.isArray(object2))
              return {};
            {
              if ("host" in object2) {
                var error = su__undefined__string_eu(object2["host"]);
                if (error)
                  return error;
              }
            }
            {
              if ("protocol" in object2) {
                var error = su__undefined__string_eu(object2["protocol"]);
                if (error)
                  return error;
              }
            }
            {
              if ("port" in object2) {
                var error = su__undefined__string__number_eu(object2["port"]);
                if (error)
                  return error;
              }
            }
            {
              if ("timeout" in object2) {
                var error = su__undefined__number_eu(object2["timeout"]);
                if (error)
                  return error;
              }
            }
            {
              if ("logging" in object2) {
                var error = su__undefined__10__11_eu(object2["logging"]);
                if (error)
                  return error;
              }
            }
            {
              if ("network" in object2) {
                var error = su__undefined__string_eu(object2["network"]);
                if (error)
                  return error;
              }
            }
            return null;
          }
          function _any() {
            return null;
          }
          function _2(object2) {
            if (typeof object2 !== "object" || object2 === null || Array.isArray(object2))
              return {};
            {
              if ("logger" in object2) {
                var error = _any(object2["logger"]);
                if (error)
                  return error;
              }
            }
            return null;
          }
          function si__1__2_ei(object2) {
            var conditions = [_1, _2];
            for (const condition of conditions) {
              var error = condition(object2);
              if (error)
                return error;
            }
            return null;
          }
          return si__1__2_ei(object);
        })) {
          throw "TypeError";
        }
        delete res.logger;
        return res;
      });
    }
    signTransaction(tx, options) {
      var _a;
      return __awaiter(this, void 0, void 0, function* () {
        const txHeader = __rest(tx, ["data", "chunks"]);
        const res = yield this.postMessage("signTransaction", [txHeader, options]);
        if (!typescriptIs.is(res, (object) => {
          function _string(object2) {
            if (typeof object2 !== "string")
              return {};
            else
              return null;
          }
          function _undefined(object2) {
            if (object2 !== void 0)
              return {};
            else
              return null;
          }
          function _null(object2) {
            if (object2 !== null)
              return {};
            else
              return null;
          }
          function su__undefined__null__string_eu(object2) {
            var conditions = [_undefined, _null, _string];
            for (const condition of conditions) {
              var error = condition(object2);
              if (!error)
                return null;
            }
            return {};
          }
          function _9(object2) {
            if (typeof object2 !== "object" || object2 === null || Array.isArray(object2))
              return {};
            {
              if ("name" in object2) {
                var error = _string(object2["name"]);
                if (error)
                  return error;
              } else
                return {};
            }
            {
              if ("value" in object2) {
                var error = _string(object2["value"]);
                if (error)
                  return error;
              } else
                return {};
            }
            return null;
          }
          function sa__9_ea_9(object2) {
            if (!Array.isArray(object2))
              return {};
            for (let i = 0; i < object2.length; i++) {
              var error = _9(object2[i]);
              if (error)
                return error;
            }
            return null;
          }
          function su__undefined__null_sa__9_ea_9_9_9_eu(object2) {
            var conditions = [_undefined, _null, sa__9_ea_9];
            for (const condition of conditions) {
              var error = condition(object2);
              if (!error)
                return null;
            }
            return {};
          }
          function _0(object2) {
            if (typeof object2 !== "object" || object2 === null || Array.isArray(object2))
              return {};
            {
              if ("id" in object2) {
                var error = _string(object2["id"]);
                if (error)
                  return error;
              } else
                return {};
            }
            {
              if ("owner" in object2) {
                var error = su__undefined__null__string_eu(object2["owner"]);
                if (error)
                  return error;
              }
            }
            {
              if ("tags" in object2) {
                var error = su__undefined__null_sa__9_ea_9_9_9_eu(object2["tags"]);
                if (error)
                  return error;
              }
            }
            {
              if ("signature" in object2) {
                var error = _string(object2["signature"]);
                if (error)
                  return error;
              } else
                return {};
            }
            {
              if ("reward" in object2) {
                var error = su__undefined__null__string_eu(object2["reward"]);
                if (error)
                  return error;
              }
            }
            return null;
          }
          return _0(object);
        })) {
          throw "TypeError";
        }
        tx.setSignature({
          id: res.id,
          owner: res.owner || tx.owner,
          tags: (_a = res.tags) === null || _a === void 0 ? void 0 : _a.map((tag) => new Tag(tag.name, tag.value, true)),
          signature: res.signature,
          reward: res.reward || void 0
        });
        return tx;
      });
    }
    signDataItem(tx) {
      return __awaiter(this, void 0, void 0, function* () {
        const res = yield this.postMessage("signDataItem", [tx]);
        if (!ArrayBuffer.isView(res)) {
          throw "TypeError";
        }
        return res.buffer;
      });
    }
    dispatch(tx, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const res = yield this.postMessage("dispatch", [tx, options], { transfer: true });
        if (!typescriptIs.is(res, (object) => {
          function _string(object2) {
            if (typeof object2 !== "string")
              return {};
            else
              return null;
          }
          function _2(object2) {
            if (object2 !== "BASE")
              return {};
            else
              return null;
          }
          function _3(object2) {
            if (object2 !== "BUNDLED")
              return {};
            else
              return null;
          }
          function su__2__3_eu(object2) {
            var conditions = [_2, _3];
            for (const condition of conditions) {
              var error = condition(object2);
              if (!error)
                return null;
            }
            return {};
          }
          function _0(object2) {
            if (typeof object2 !== "object" || object2 === null || Array.isArray(object2))
              return {};
            {
              if ("id" in object2) {
                var error = _string(object2["id"]);
                if (error)
                  return error;
              }
            }
            {
              if ("type" in object2) {
                var error = su__2__3_eu(object2["type"]);
                if (error)
                  return error;
              }
            }
            return null;
          }
          return _0(object);
        })) {
          throw "TypeError";
        }
        return res;
      });
    }
    signMessage(message, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const res = yield this.postMessage("signMessage", [message, options]);
        if (!ArrayBuffer.isView(res)) {
          throw "TypeError";
        }
        const constructor = message.constructor;
        return new constructor(res.buffer);
      });
    }
    verifyMessage(message, signature, publicKey, options) {
      return __awaiter(this, void 0, void 0, function* () {
        signature = typeof signature === "string" ? ArweaveUtils.b64UrlToBuffer(signature) : signature;
        const res = yield this.postMessage("verifyMessage", [message, signature, publicKey, options]);
        if (!typescriptIs.is(res, (object) => {
          function _boolean(object2) {
            if (typeof object2 !== "boolean")
              return {};
            else
              return null;
          }
          return _boolean(object);
        })) {
          throw "TypeError";
        }
        return res;
      });
    }
    encrypt(message, publicKey, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const res = yield this.postMessage("encrypt", [message, publicKey, options]);
        if (!ArrayBuffer.isView(res)) {
          throw "TypeError";
        }
        const constructor = message.constructor;
        return new constructor(res.buffer);
      });
    }
    decrypt(message, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const res = yield this.postMessage("decrypt", [message, options]);
        if (!ArrayBuffer.isView(res)) {
          throw "TypeError";
        }
        const constructor = message.constructor;
        return new constructor(res.buffer);
      });
    }
    privateHash(message, options) {
      return __awaiter(this, void 0, void 0, function* () {
        const res = yield this.postMessage("privateHash", [message, options]);
        if (!ArrayBuffer.isView(res)) {
          throw "TypeError";
        }
        const constructor = message.constructor;
        return new constructor(res.buffer);
      });
    }
  };
}
function mitt(n) {
  return { all: n = n || /* @__PURE__ */ new Map(), on: function(t2, e) {
    var i = n.get(t2);
    i ? i.push(e) : n.set(t2, [e]);
  }, off: function(t2, e) {
    var i = n.get(t2);
    i && (e ? i.splice(i.indexOf(e) >>> 0, 1) : n.set(t2, []));
  }, emit: function(t2, e) {
    var i = n.get(t2);
    i && i.slice().map(function(n2) {
      n2(e);
    }), (i = n.get("*")) && i.slice().map(function(n2) {
      n2(t2, e);
    });
  } };
}
var Emitter = class {
  constructor() {
    this.mittInstance = mitt();
  }
  emit(method, params) {
    this.mittInstance.emit(method, params);
  }
  on(method, handler) {
    this.mittInstance.on(method, handler);
  }
  off(method, handler) {
    this.mittInstance.off(method, handler);
  }
  once(method, handler) {
    return new Promise((resolve) => {
      const wrapper = (e) => {
        this.off(method, wrapper);
        resolve(e);
        if (handler) {
          handler(e);
        }
      };
      this.on(method, wrapper);
    });
  }
};
var PromiseController = class {
  constructor() {
    this._promiseController = [];
  }
  newMessagePromise(message, options) {
    message.id = this._promiseController.length;
    const promise = new Promise((resolve, reject) => this._promiseController.push({ resolve, reject }));
    if (options === null || options === void 0 ? void 0 : options.timeout) {
      setTimeout(() => this._promiseController[message.id].reject("timeout"), options.timeout);
    }
    return promise;
  }
  processResponse(message) {
    const { id, result, error } = message;
    if (id == null) {
      return;
    }
    if (typeof id !== "number" && typeof id !== "string") {
      throw "error";
    }
    if (typeof id === "string" && isNaN(parseInt(id))) {
      throw "error";
    }
    if (!this._promiseController[+id]) {
      throw "received result to nonexistent request";
    }
    if (error != null) {
      this._promiseController[+id].reject(error);
    } else {
      this._promiseController[+id].resolve(result);
    }
    return true;
  }
};
var WIDTH = "400";
var HEIGHT = "600";
var Bridge = class extends Emitter {
  constructor(connectToUrl, appInfo, load2) {
    super();
    this._iframe = {};
    this._showIframe = false;
    this._popup = {};
    this._usePopup = true;
    this._requirePopup = false;
    this._keepPopup = false;
    this._promiseController = new PromiseController();
    this._pending = [];
    this.listener = (e) => {
      var _a, _b, _c, _d, _e, _f;
      if (e.source !== this._popup.window && e.source !== ((_a = this._iframe) === null || _a === void 0 ? void 0 : _a.window)) {
        return;
      }
      if (e.origin !== ((_b = this._url) === null || _b === void 0 ? void 0 : _b.origin)) {
        return;
      }
      if (typeof e.data !== "object") {
        return;
      }
      const { method, params, id, result, error, session } = e.data;
      console.info(`WalletConnector:${e.source === this._popup.window ? "popup" : "iframe"}`, e.data);
      if (id != null) {
        this._pending = this._pending.filter((x) => x != id);
      }
      if (this._promiseController.processResponse(e.data)) {
        return;
      }
      if (typeof method !== "string") {
        return;
      }
      if (method === "ready") {
        if (e.source === this._popup.window) {
          (_d = (_c = this._popup).resolve) === null || _d === void 0 ? void 0 : _d.call(_c);
        }
        if (e.source === this._iframe.window) {
          (_f = (_e = this._iframe).resolve) === null || _f === void 0 ? void 0 : _f.call(_e);
        }
        return;
      }
      if (method === "change") {
        return;
      }
      if (method === "showIframe") {
        if (typeof params !== "boolean") {
          return;
        }
        this.showIframe = params;
      }
      if (method === "usePopup") {
        if (typeof params !== "boolean") {
          return;
        }
        this.setUsePopup(params);
      }
      if (method === "keepPopup") {
        if (typeof params !== "boolean") {
          return;
        }
        this.setRequirePopup(params);
      }
      const emitting = { method, params, session };
      if (!typescriptIs.is(emitting, (object) => {
        function _string(object2) {
          if (typeof object2 !== "string")
            return {};
          else
            return null;
        }
        function _unknown() {
          return null;
        }
        function _undefined(object2) {
          if (object2 !== void 0)
            return {};
          else
            return null;
        }
        function _number(object2) {
          if (typeof object2 !== "number")
            return {};
          else
            return null;
        }
        function su__undefined__string__number_eu(object2) {
          var conditions = [_undefined, _string, _number];
          for (const condition of conditions) {
            var error2 = condition(object2);
            if (!error2)
              return null;
          }
          return {};
        }
        function _0(object2) {
          if (typeof object2 !== "object" || object2 === null || Array.isArray(object2))
            return {};
          {
            if ("method" in object2) {
              var error2 = _string(object2["method"]);
              if (error2)
                return error2;
            } else
              return {};
          }
          {
            if ("params" in object2) {
              var error2 = _unknown(object2["params"]);
              if (error2)
                return error2;
            } else
              return {};
          }
          {
            if ("session" in object2) {
              var error2 = su__undefined__string__number_eu(object2["session"]);
              if (error2)
                return error2;
            }
          }
          return null;
        }
        return _0(object);
      })) {
        return console.warn("dropped");
      }
      this.emit("message", emitting);
    };
    this._iframeParentNode = appInfo === null || appInfo === void 0 ? void 0 : appInfo.iframeParentNode;
    this._url = connectToUrl;
    if (typeof window !== "undefined") {
      const urlInfo = {
        origin: window.location.origin,
        session: Math.random().toString().slice(2)
      };
      if (appInfo === null || appInfo === void 0 ? void 0 : appInfo.name) {
        urlInfo.name = appInfo.name;
      }
      if (appInfo === null || appInfo === void 0 ? void 0 : appInfo.logo) {
        urlInfo.logo = appInfo.logo;
      }
      this._url.hash = new URLSearchParams(urlInfo).toString();
      window.addEventListener("message", this.listener);
      if (load2) {
        this.openIframe();
      }
    }
  }
  get url() {
    var _a;
    return (_a = this._url) === null || _a === void 0 ? void 0 : _a.origin;
  }
  get showIframe() {
    return this._showIframe;
  }
  set showIframe(value) {
    if (value === this._showIframe) {
      return;
    }
    this._showIframe = value;
    this.deliverMessage({ method: "showIframe", params: value });
    this.emit("builtin", { showIframe: value });
    if (!this._iframeNode) {
      return;
    }
    if (!this._iframeParentNode) {
      this._iframeNode.style.opacity = value ? "1" : "0";
      this._iframeNode.style.pointerEvents = value ? "" : "none";
      this._iframeNode.style.touchAction = value ? "" : "none";
      this._iframeNode.style.zIndex = value ? "1000000" : "-1000000";
      this._iframeNode.style.transform = value ? "" : "translate(0, 24px)";
      this._iframeNode.style.transition = value ? "opacity 0.36s cubic-bezier(0.22, 1, 0.36, 1), transform 0.36s cubic-bezier(0.22, 1, 0.36, 1)" : "opacity 0.1s ease, transform 0.1s ease, z-index 0s linear 0.1s";
    }
  }
  get usePopup() {
    return this._usePopup;
  }
  setUsePopup(value) {
    if (value === this._usePopup) {
      return;
    }
    this._usePopup = value;
    this.emit("builtin", { usePopup: value });
  }
  get requirePopup() {
    return this._requirePopup;
  }
  setRequirePopup(value) {
    if (value === this._requirePopup) {
      return;
    }
    this._requirePopup = value;
    this.emit("builtin", { requirePopup: value });
  }
  get keepPopup() {
    return this._keepPopup;
  }
  set keepPopup(value) {
    this._keepPopup = value;
    this.emit("builtin", { keepPopup: value });
    if (!value) {
      this.closePopup();
    }
    if (value) {
      this.openPopup(true);
    }
  }
  destructor(options) {
    this.closeIframe();
    this.closePopup(true);
    window.removeEventListener("message", this.listener);
  }
  postMessage(message, options) {
    const promise = this._promiseController.newMessagePromise(message, options).finally(() => this.completeRequest());
    this.deliverMessage(message);
    return promise;
  }
  openIframe() {
    var _a;
    if (this._iframeEl) {
      return;
    }
    const promise = new Promise((resolve, reject) => this._iframe = { resolve, reject });
    this._iframe.promise = promise;
    const existing = Array.from(document.querySelectorAll("iframe")).find((el) => {
      try {
        const url = new URL(el.src);
        return url.origin === this.url;
      } catch (e) {
      }
    });
    if (existing) {
      this._iframeEl = existing;
      this._iframe.window = this._iframeEl.contentWindow;
      this.postMessage({ method: "ready" });
    } else {
      this._iframeNode = (_a = this._iframeParentNode) !== null && _a !== void 0 ? _a : document.createElement("div");
      this._iframeEl = document.createElement("iframe");
      this._iframeEl.src = this._url.toString();
      this._iframeEl.allow = "usb; hid; bluetooth; serial; camera; payment; web-share";
      this._iframeEl.setAttribute("allowTransparency", "true");
      this._iframeEl.style.border = "none";
      if (this._iframeParentNode) {
        this._iframeEl.style.backgroundColor = "transparent";
        this._iframeEl.style.width = "100%";
        this._iframeEl.style.height = "100%";
      } else {
        this._iframeEl.width = WIDTH;
        this._iframeEl.height = HEIGHT;
        this._iframeEl.style.borderRadius = "8px";
        this._iframeEl.style.maxWidth = "100%";
        this._iframeEl.style.maxHeight = "100%";
        this._iframeNode.style.position = "fixed";
        this._iframeNode.style.inset = "0";
        this._iframeNode.style.display = "flex";
        this._iframeNode.style.alignItems = "center";
        this._iframeNode.style.justifyContent = "center";
        this._iframeNode.style.background = "#00000088";
        this._iframeNode.style.opacity = "0";
        this._iframeNode.style.pointerEvents = "none";
        this._iframeNode.style.touchAction = "none";
        this._iframeNode.style.zIndex = "-1000000";
        this._iframeNode.style.transform = "translate(0, 24px)";
        this._iframeNode.style.transition = "opacity 0.1s ease, transform 0.1s ease, z-index 0s linear 0.1s";
      }
      this._iframeNode.appendChild(this._iframeEl);
      const injectIframe = () => {
        var _a2;
        if (!this._iframeParentNode) {
          document.body.appendChild(this._iframeNode);
        }
        this._iframe.window = (_a2 = this._iframeEl) === null || _a2 === void 0 ? void 0 : _a2.contentWindow;
      };
      if (document.readyState === "complete" || document.readyState === "interactive") {
        injectIframe();
      } else {
        document.addEventListener("DOMContentLoaded", injectIframe);
      }
    }
  }
  closeIframe() {
    var _a, _b, _c, _d, _e;
    (_a = this._iframeEl) === null || _a === void 0 ? void 0 : _a.setAttribute("src", "about:blank");
    (_b = this._iframeEl) === null || _b === void 0 ? void 0 : _b.remove();
    (_c = this._iframeNode) === null || _c === void 0 ? void 0 : _c.remove();
    this._iframeNode = void 0;
    this._iframeEl = void 0;
    (_e = (_d = this._iframe).reject) === null || _e === void 0 ? void 0 : _e.call(_d);
    this._iframe = {};
  }
  openPopup(force) {
    if (this._popup.window && !this._popup.window.closed) {
      this._popup.window.focus();
      return;
    }
    if (!this.usePopup && !force) {
      return;
    }
    window.name = "parent";
    const popupWindow = window.open(this._url.toString(), "_blank", `location,resizable,scrollbars,width=${WIDTH},height=${HEIGHT}`);
    const promise = new Promise((resolve, reject) => this._popup = { window: popupWindow, resolve, reject });
    this._popup.promise = promise;
    const timer = setInterval(() => {
      if (this._popup.window && !this._popup.window.closed) {
        return;
      }
      if (this.keepPopup) {
        this.keepPopup = false;
      }
      clearInterval(timer);
    }, 200);
  }
  closePopup(force) {
    var _a, _b, _c;
    if (!this._popup.window || ((_a = this._popup.window) === null || _a === void 0 ? void 0 : _a.closed)) {
      return;
    }
    if ((this.keepPopup || this.requirePopup) && !force) {
      return;
    }
    const popupWindow = this._popup.window;
    popupWindow.close();
    popupWindow.location.href = "about:blank";
    let i = 0;
    const timer = setInterval(() => {
      if (i > 50 || !popupWindow || popupWindow.closed) {
        clearInterval(timer);
      } else {
        i++;
      }
      popupWindow.close();
    }, 100);
    (_c = (_b = this._popup).reject) === null || _c === void 0 ? void 0 : _c.call(_b);
    this._popup = {};
  }
  completeRequest() {
    setTimeout(() => {
      if (this._pending.length) {
        return;
      }
      this.closePopup();
      this.showIframe = false;
    }, 100);
  }
  deliverMessage(message, options) {
    var _a, _b;
    if (!this._url) {
      throw "Missing URL";
    }
    console.info(`WalletConnector:post`, message);
    const fullMessage = Object.assign(Object.assign({}, message), { jsonrpc: "2.0" });
    fullMessage.id != null && this._pending.push(fullMessage.id);
    this.openIframe();
    this._iframe.promise = (_a = this._iframe.promise) === null || _a === void 0 ? void 0 : _a.then(() => {
      var _a2;
      return (_a2 = this._iframe.window) === null || _a2 === void 0 ? void 0 : _a2.postMessage(fullMessage, this._url.origin, (options === null || options === void 0 ? void 0 : options.transfer) ? [fullMessage] : void 0);
    }).catch(() => {
      return;
    });
    this.openPopup();
    this._popup.promise = (_b = this._popup.promise) === null || _b === void 0 ? void 0 : _b.then(() => {
      var _a2;
      return (_a2 = this._popup.window) === null || _a2 === void 0 ? void 0 : _a2.postMessage(fullMessage, this._url.origin, (options === null || options === void 0 ? void 0 : options.transfer) ? [fullMessage] : void 0);
    }).catch(() => {
      return;
    });
  }
};
function generateUrl(url) {
  if (typeof url === "object") {
    return url;
  }
  if (!url.includes("://")) {
    url = "https://" + url;
  }
  return new URL(url);
}
var interval;
var connectors = [];
var loaded = {};
var swaps = {};
function load(connector) {
  if (!connector.namespaces) {
    return;
  }
  if (!connectors.find((c3) => c3 === connector)) {
    connectors.push(connector);
  }
  update();
}
function unload(connector) {
  if (!connectors.find((c3) => c3 === connector)) {
    return update();
  }
  connectors.splice(connectors.indexOf(connector), 1);
  for (const namespace in connector.namespaces) {
    if (loaded[namespace] !== connector) {
      continue;
    }
    window[namespace] = swaps[namespace];
    delete swaps[namespace];
    delete loaded[namespace];
  }
  update();
}
function update() {
  for (const connector of connectors) {
    for (const namespace in connector.namespaces) {
      if (loaded[namespace] && loaded[namespace] !== connector) {
        continue;
      }
      if (window[namespace] === connector.namespaces[namespace]) {
        continue;
      }
      swaps[namespace] = window[namespace];
      window[namespace] = connector.namespaces[namespace];
      loaded[namespace] = connector;
    }
  }
  window.clearInterval(interval);
  if (connectors.length) {
    interval = setInterval(() => update(), 1e4);
  }
}
var windowMissing = "Window context missing. If you are using a server side rendering framework, make sure that the connector is excluded. If you want to use the connector outside the browser, use the node version of the module instead";
var BrowserConnector = class _BrowserConnector extends Emitter {
  constructor(appInfo, connectToUrl) {
    super();
    this._session = 0;
    this._listener = (message) => {
      const { method, params, session } = message;
      if (session != null && this._session != session) {
        return;
      }
      if (!session && this._session) {
        return;
      }
      if (method === "connect") {
        if (!typescriptIs.is(params, (object) => {
          function _string(object2) {
            if (typeof object2 !== "string")
              return {};
            else
              return null;
          }
          return _string(object);
        })) {
          return;
        }
        this.setAddress(params);
      }
      if (method === "disconnect") {
        this.disconnectEvent(false);
      }
    };
    this._appInfo = appInfo;
    this._emitterPassthrough = (param) => {
      const event = Object.entries(param)[0];
      this.emit(event[0], event[1]);
    };
    this.on("connect", () => load(this));
    this.on("disconnect", () => unload(this));
    if (connectToUrl) {
      this._url = generateUrl(connectToUrl);
    }
  }
  get address() {
    return this._address;
  }
  setAddress(value) {
    if (value && value === this.address) {
      return;
    }
    this._address = value;
    value != null ? this.emit("connect", value) : this.emit("disconnect", value);
    this.emit("change", value);
  }
  get connected() {
    return this._address != null;
  }
  get url() {
    var _a;
    return (_a = this._bridge) === null || _a === void 0 ? void 0 : _a.url;
  }
  get showIframe() {
    var _a;
    return ((_a = this._bridge) === null || _a === void 0 ? void 0 : _a.showIframe) || false;
  }
  get usePopup() {
    var _a;
    return ((_a = this._bridge) === null || _a === void 0 ? void 0 : _a.usePopup) || false;
  }
  get requirePopup() {
    var _a;
    return ((_a = this._bridge) === null || _a === void 0 ? void 0 : _a.requirePopup) || false;
  }
  get keepPopup() {
    var _a;
    return ((_a = this._bridge) === null || _a === void 0 ? void 0 : _a.keepPopup) || false;
  }
  set keepPopup(keep) {
    this._bridge && (this._bridge.keepPopup = keep);
  }
  setUrl(connectToUrl, load2) {
    var _a;
    if (typeof window === "undefined") {
      console.error(windowMissing);
      return;
    }
    const oldBridge = this._bridge;
    const url = generateUrl(connectToUrl);
    this._url = url;
    if (((_a = this._bridge) === null || _a === void 0 ? void 0 : _a.url) === url.origin) {
      return;
    }
    this.disconnect();
    if (!_BrowserConnector._bridges[url.origin]) {
      this._bridge = new Bridge(url, this._appInfo, load2);
      _BrowserConnector._bridges[url.origin] = { bridge: this._bridge, sessions: [] };
    } else {
      this._bridge = _BrowserConnector._bridges[url.origin].bridge;
      const sessions = _BrowserConnector._bridges[url.origin].sessions;
      for (let i = 0; i <= sessions.length; i++) {
        if (sessions.indexOf(i) < 0) {
          this._session = i;
          break;
        }
      }
    }
    _BrowserConnector._bridges[url.origin].sessions.push(this._session);
    this._bridge.on("message", this._listener);
    this._bridge.on("builtin", this._emitterPassthrough);
    if (this._bridge.showIframe !== (oldBridge === null || oldBridge === void 0 ? void 0 : oldBridge.showIframe)) {
      this.emit("showIframe", this._bridge.showIframe);
    }
    if (this._bridge.usePopup !== (oldBridge === null || oldBridge === void 0 ? void 0 : oldBridge.usePopup)) {
      this.emit("usePopup", this._bridge.usePopup);
    }
    if (this._bridge.requirePopup !== (oldBridge === null || oldBridge === void 0 ? void 0 : oldBridge.requirePopup)) {
      this.emit("requirePopup", this._bridge.requirePopup);
    }
    if (this._bridge.keepPopup !== (oldBridge === null || oldBridge === void 0 ? void 0 : oldBridge.keepPopup)) {
      this.emit("keepPopup", this._bridge.keepPopup);
    }
  }
  connect(options) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this._url) {
        throw "Connect failed: URL missing";
      }
      if (!this._bridge) {
        this.setUrl(this._url);
      }
      const promise = new Promise((resolve, reject) => {
        this.once("change", (address) => address ? resolve(address) : reject());
      }).finally(() => {
        var _a;
        return (_a = this._bridge) === null || _a === void 0 ? void 0 : _a.completeRequest();
      });
      this._bridge.deliverMessage({ method: "connect", params: options });
      return promise;
    });
  }
  disconnect(options) {
    return __awaiter(this, void 0, void 0, function* () {
      return this.disconnectEvent(true, options);
    });
  }
  disconnectEvent(fromMethod, options) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this._bridge) {
        return;
      }
      const oldBridge = this._bridge;
      const session = this._session;
      const url = oldBridge.url;
      this.setAddress(void 0);
      this._bridge = void 0;
      this._session = 0;
      if (fromMethod) {
        try {
          yield oldBridge.postMessage({ method: "disconnect", params: [options], session }, { timeout: 5e3 });
        } catch (e) {
          console.warn("disconnect request failed");
        }
      }
      oldBridge.off("message", this._listener);
      oldBridge.off("builtin", this._emitterPassthrough);
      _BrowserConnector._bridges[url].sessions = _BrowserConnector._bridges[url].sessions.filter((x) => x != session);
      setTimeout(() => {
        if (_BrowserConnector._bridges[url].sessions.length) {
          return;
        }
        _BrowserConnector._bridges[url].bridge.destructor();
        delete _BrowserConnector._bridges[url];
      }, 100);
    });
  }
  postMessage(method, params, options) {
    return new Promise((resolve, reject) => {
      if (!this._url) {
        throw "Post message failed: URL missing";
      }
      if (!this._bridge) {
        throw "Post message failed: URL not loaded, call setUrl or connect first";
      }
      this.once("disconnect", reject);
      this._bridge.postMessage({ method, params, session: this._session, protocol: options === null || options === void 0 ? void 0 : options.protocol, version: options === null || options === void 0 ? void 0 : options.version }, options).then(resolve).catch(reject);
    });
  }
};
BrowserConnector._bridges = {};
var ReactiveConnector = class _ReactiveConnector extends BrowserConnector {
  constructor(appInfo, options) {
    var _a;
    super(appInfo, (_a = parseState(options === null || options === void 0 ? void 0 : options.state)) === null || _a === void 0 ? void 0 : _a.url);
    this._subs = [];
    this._localStorageKey = "arweave-wallet-connector:URL";
    this.setUrl = (connectToUrl, load2) => {
      super.setUrl(connectToUrl, load2);
      this.updateState({ url: super.url });
    };
    this.subscribe = (handler) => {
      this._subs.push(handler);
      handler(this._state.value);
      return () => this._subs.filter((sub) => sub !== handler);
    };
    this.setState = (state) => {
      var _a2;
      const instance = (_a2 = _ReactiveConnector._instance) !== null && _a2 !== void 0 ? _a2 : this;
      if (state && Array.isArray(state)) {
        instance._setState = state[1];
      }
      if (state && "set" in state) {
        instance._setState = state.set;
      }
      const init = initState(state);
      instance._state = init.state;
      if (Object.keys(init.newProps).length) {
        instance.updateState(init.newProps);
      }
      return state;
    };
    this.updateState = (state) => {
      if (!state) {
        return;
      }
      Object.assign(this._state.value, state);
      if (this._setState) {
        this._setState(Object.assign({}, this._state.value));
      }
      this._subs.forEach((sub) => sub(this._state.value));
    };
    this.setState(options === null || options === void 0 ? void 0 : options.state);
    if (_ReactiveConnector._instance) {
      return _ReactiveConnector._instance;
    }
    _ReactiveConnector._instance = new Proxy(this, {
      get: (target, p, receiver) => {
        return p in target._state.value ? target._state.value[p] : target[p];
      },
      set: (target, p, value, receiver) => {
        if (p === "keepPopup") {
          super.keepPopup = value;
        } else {
          target[p] = value;
        }
        return true;
      }
    });
    let isUnloading = false;
    this.on("connect", (address) => {
      const url = super.url;
      this.updateState({ address, url, connected: true });
      if (this._localStorageKey) {
        localStorage.setItem(this._localStorageKey, url !== null && url !== void 0 ? url : "");
      }
    });
    this.on("disconnect", () => {
      this.updateState({ address: void 0, connected: false });
      if (this._localStorageKey && !isUnloading) {
        localStorage.removeItem(this._localStorageKey);
      }
    });
    const events = ["showIframe", "usePopup", "requirePopup", "keepPopup"];
    events.forEach((event) => this.on(event, (val) => this.updateState({ [event]: val })));
    if (typeof window !== "undefined") {
      window.addEventListener("beforeunload", () => isUnloading = true);
      window.addEventListener("unload", () => isUnloading = true);
      if ((options === null || options === void 0 ? void 0 : options.localStorageKey) != void 0) {
        this._localStorageKey = options.localStorageKey;
      }
      if (this._localStorageKey) {
        const reconnect = localStorage.getItem(this._localStorageKey);
        if (reconnect) {
          this.setUrl(reconnect, true);
        }
        localStorage.removeItem(this._localStorageKey);
      }
    }
    return _ReactiveConnector._instance;
  }
};
function parseState(state) {
  if (!state) {
    return;
  }
  if ("subscribe" in state) {
    let res = void 0;
    const unsub = state.subscribe((val) => res = val);
    unsub === null || unsub === void 0 ? void 0 : unsub();
    return res;
  }
  return Array.isArray(state) ? state[0] : "value" in state ? state.value : state;
}
function initState(state) {
  let result;
  if (!state) {
    result = applyDefaultsRef({ value: {} });
  } else if (Array.isArray(state)) {
    result = applyDefaultsRef({ value: state[0] });
  } else if ("value" in state) {
    result = applyDefaultsRef(state);
  } else if ("subscribe" in state) {
    result = applyDefaultsRef({ value: parseState(state) });
  } else {
    result = applyDefaultsRef({ value: state });
  }
  return result;
}
function applyDefaultsRef(state) {
  var _a;
  (_a = state.value) !== null && _a !== void 0 ? _a : state.value = {};
  const result = applyDefaults(state.value);
  return { state, newProps: result.newProps };
}
function applyDefaults(state = {}) {
  const defaultState = {
    url: void 0,
    address: void 0,
    connected: false,
    showIframe: false,
    usePopup: false,
    requirePopup: false,
    keepPopup: false
  };
  const newProps = {};
  for (const key in defaultState) {
    if (state[key] == void 0) {
      newProps[key] = defaultState[key];
      state[key] = defaultState[key];
    }
  }
  return { state, newProps };
}
var ArweaveWebWallet = ArweaveApi(ReactiveConnector);

// node_modules/@arweave-wallet-kit/webwallet-strategy/dist/index.es.js
var c2 = Object.defineProperty;
var l = (a, n, e) => n in a ? c2(a, n, { enumerable: true, configurable: true, writable: true, value: e }) : a[n] = e;
var t = (a, n, e) => (l(a, typeof n != "symbol" ? n + "" : n, e), e);
var s = {
  name: "Arweave.app",
  description: "Web based wallet software",
  theme: "24, 24, 24",
  logo: "qVms-k8Ox-eKFJN5QFvrPQvT9ryqQXaFcYbr-fJbgLY",
  url: "arweave.app",
  customInterfaceURL: "https://arweave.app"
};
var d = class extends c {
  constructor(e) {
    super();
    t(this, "id", "webwallet");
    t(this, "name", s.name);
    t(this, "description", s.description);
    t(this, "theme", s.theme);
    t(this, "logo", s.logo);
    t(this, "url", s.customInterfaceURL);
    t(this, "instance", new ArweaveWebWallet());
    t(this, "instanceURL", s.url);
    e && (this.name = e.name, this.description = e.description, this.theme = e.theme || s.theme, this.logo = e.logo || s.logo, this.instanceURL = e.url, this.url = e.customInterfaceURL || "http://" + e.url), this.instance.setUrl(this.instanceURL), this.instanceURL !== s.url && (this.id = this.id + this.instanceURL);
  }
  async isAvailable() {
    return true;
  }
  async resumeSession() {
    this.instance.setUrl(this.instanceURL), await this.instance.connect();
  }
  async connect(e, r, o) {
    o && console.warn(
      "[Arweave Wallet Kit] The WebWallets API does not support custom gateway connection yet."
    ), this.instance = new ArweaveWebWallet(r), await this.resumeSession();
  }
  addAddressEvent(e) {
    return this.instance.on("connect", e), e;
  }
  removeAddressEvent(e) {
    this.instance.off("connect", e);
  }
};
export {
  d as default
};
/*! Bundled license information:

arweave-wallet-connector/lib/index.js:
  (*! *****************************************************************************
  Copyright (C) Microsoft. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0
  
  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.
  
  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** *)
*/
//# sourceMappingURL=@arweave-wallet-kit_webwallet-strategy.js.map
